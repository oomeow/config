" ======== plugins ========
set surround
set multiple-cursors
set NERDTree
set easymotion
set ReplaceWithRegister
" ======== plugins ========

" 捕获当前操作的 action id
"set trackactionids

" 通用设置
set ideajoin
set scrolloff=5
set incsearch
set ignorecase
set smartcase
set hlsearch
set nu
set rnu

" 设置返回 normal 模式时回到英文输入法
set keep-english-in-normal
" 系统剪贴板
"set clipboard+=unnamedplus
set clipboard=unnamed
set clipboard^=ideaput

" ================================================================================================
" No Leader Keymaps
" ================================================================================================
" 复制粘贴
map <C-c> "+y
vmap <C-v> "+p
imap <C-v> <C-r>+
"map <C-S-V> "+p
"vmap <C-v> "+p

" 重新执行一次 redo
nmap U <C-r>
" 前进/后退 (似乎不用配置）
"nmap <C-o> <Action>(Back)
"nmap <C-i> <Action>(Forward)

" 在普通和插入模式下，向下交换行/向上交换行 --> 推荐修改idea设置中的键盘映射
"nmap <C-S-J> :m +1<CR>
"nmap <C-S-K> :m -2<CR>
"imap <C-S-J> <Esc> :m +1<CR>gi
"imap <C-S-K> <Esc> :m -2<CR>gi

" 打开终端
nmap `` <Action>(ActivateTerminalToolWindow)

" 查找当前元素的上/下一个应用位置
map <C-j> <Action>(GotoNextElementUnderCaretUsage)
map <C-k> <Action>(GotoPrevElementUnderCaretUsage)

" 类 wildfire,是 IDEA 中的 (Ctrl + w) 选中范围的快捷键
nmap <Enter> <Action>(EditorSelectWord)
nmap <BS> <Action>(EditorUnSelectWord)
xmap <Enter> <Action>(EditorSelectWord)
xmap <BS> <Action>(EditorUnSelectWord)

" jk 映射为 <Esc>
imap jk <Esc>

" 格式化（规范化）文本，即对选定的文本进行换行或重排，适应指定的文本宽度。
" 全文规范化：Ctrl+Alt+l --> Don't use Ex mode, use Q for formatting.
map Q gq
" 在源代码和测试代码之间快速切换
nmap gt <Action>(Generate)
" 查找当前 VCS 上/下一个改变之处
nmap [c <Action>(VcsShowPrevChangeMarker)
nmap ]c <Action>(VcsShowNextChangeMarker)
" 跳转到上/下一个错误或警告
nmap [d <Action>(GotoPreviousError)
nmap ]d <Action>(GotoNextError)
" 将光标移动到上/下一个方法的声明处
nmap [f <Action>(MethodUp)
nmap ]f <Action>(MethodDown)

" 对分割标签页窗口的选择，左/下/上/右 移动选择
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" ======== toggle 开关 ========
" 当前行书签启用/禁用
nmap tm <Action>(ToggleBookmark)
" 当前行断点启用/禁用
nmap tl <Action>(ToggleLineBreakpoint)
" debug 模式启用/禁用
nmap tb <Action>(XDebugger.MuteBreakpoints)
" 文档注释渲染开关
nmap td <Action>(ToggleRenderedDocPresentation)

" 切换标签页
nmap L <Action>(NextTab)
nmap H <Action>(PreviousTab)
" Tab 按键缩进
vmap <tab> >gv
vmap <s-tab> <gv

" 将 (Ctrl + s) 映射为保存文档(也可以在 VIM 设置里将此快捷键设置为 IDEA 的快捷键)
nmap <C-s> <Action>(SaveAll)
imap <C-s> <Esc><Action>(SaveAll)

" 类查找
nmap gw <Action>(GotoClass)
" 类方法或类成员字段查找
nmap gs <Action>(FileStructurePopup)
" 实现类或方法查找
nmap g<space> <Action>(GotoImplementation)
" 跳转到定义或引用处
nmap gd <Action>(GotoDeclaration)
" 查找所有引用，类似vim中的quickfix列表
nmap gu <Action>(FindUsages)
" 找到被实现的类或方法
nmap gp <Action>(GotoSuperMethod)
" 该类需要实现的方法
nmap gim <Action>(ImplementMethods)
" 注释
nmap gcc <Action>(CommentByLineComment)
xmap gc <Action>(CommentByLineComment)<Esc>


" ================================================================================================
" Leader Keymaps
" ================================================================================================
" 将 <leader> 设置为 空格键
let mapleader = " "

" which-key 的官方推荐配置
set which-key
set notimeout
" 按键的超时设置
"set timeout
"set timeoutlen=2000

" ================================================================================================;
" <leader> 详细配置
" ================================================================================================
" 这一行为在按下 <leader> 后显示
let g:WhichKeyDesc_LeaderKeymap = "<leader> 🌟🌟🌟 LeaderKeymap 🌟🌟🌟"
let g:WhichKey_SortOrder = "by_key_prefix_last"

"========== a ==========
"========== b ==========
"========== c ==========
let g:WhichKeyDesc_Close = "<leader>c Close"
" 关闭所有标签页
let g:WhichKeyDesc_Close_CloseAllEditors = "<leader>C CloseAllEditors"
nmap <leader>C <Action>(CloseAllEditors)
" 关闭当前标签页
let g:WhichKeyDesc_Close_CloseContent = "<leader>c CloseContent"
nmap <leader>c <Action>(CloseContent)
" 关闭当前标签页的左边标签页
"let g:WhichKeyDesc_Close_CloseAllToTheLeft = "<leader>cl CloseAllToTheLeft"
"nmap <leader>cl <Action>(CloseAllToTheLeft)
" 关闭当前标签页的右边标签页
"let g:WhichKeyDesc_Close_CloseAllToTheRight = "<leader>cr CloseAllToTheRight"
"nmap <leader>cr <Action>(CloseAllToTheRight)
" 关闭除了当前标签页的其他所有标签页
"let g:WhichKeyDesc_Close_CloseAllEditorsButActive = "<leader>co CloseAllEditorsButActive"
"nmap <leader>co <Action>(CloseAllEditorsButActive)
" 关闭所有未修改的标签页
"let g:WhichKeyDesc_Close_CloseAllUnmodifiedEditors = "<leader>cu CloseAllUnmodifiedEditors"
"nmap <leader>cu <Action>(CloseAllUnmodifiedEditors)

"========== d ==========
let g:WhichKeyDesc_DebugOrEvaluate = "<leader>d DebugOrEvaluate"
" 调试类
let g:WhichKeyDesc_DebugOrEvaluate_DeBugClass = "<leader>db DebugClass"
nmap <leader>db <Action>(DebugClass)
" debug 状态中，计算表达式
let g:WhichKeyDesc_DebugOrEvaluate_EvaluateExpression = "<leader>de EvaluateExpression"
nmap <leader>de <Action>(EvaluateExpression)

"========== e ==========
let g:WhichKeyDesc_ToggleExplorerOrExtract = "<leader>e ToggleExplorerOrExtract"
" 打开左侧项目资源
let g:WhichKeyDesc_ToggleExplorerOrExtract_ToggleExplorer = "<leader>e ToggleExplorer"
nmap <leader>e <Action>(ActivateProjectToolWindow)
" e: Extract 提取, 在 v 模式下选中一段代码进行提取
" extract method/function 将选中的代码片段提取为一个独立的方法(Ctrl + Alt + M)
let g:WhichKeyDesc_ToggleExplorerOrExtract_ExtractMethod = "<leader>em ExtractMethod"
vmap <leader>em <Action>(ExtractMethod)
" extract constant （引入常量）的重构操作:将选中的代码片段抽取为一个常量，并自动替换选中的代码片段为新的常量引用(Ctrl + Alt + C)
let g:WhichKeyDesc_ToggleExplorerOrExtract_IntroduceConstant = "<leader>ec IntroduceConstant"
vmap <leader>ec <Action>(IntroduceConstant)
" extract field （引入字段）的重构操作:将选中的代码片段转化为一个新的字段，并自动将选中的代码片段替换为对该字段的引用(Ctrl + Alt + F)
let g:WhichKeyDesc_ToggleExplorerOrExtract_IntroduceField = "<leader>ef IntroduceField"
vmap <leader>ef <Action>(IntroduceField)
" extract variable （引入变量）的重构操作:将选中的代码片段抽取为一个新的变量，并自动替换选中的代码片段为新的变量引用(Ctrl + Alt + V)
let g:WhichKeyDesc_ToggleExplorerOrExtract_IntroduceVariable = "<leader>ev IntroduceVariable"
vmap <leader>ev <Action>(IntroduceVariable)

"========== f ==========
let g:WhichKeyDesc_FindOrFormat = "<leader>f FindOrFormat"
" 查找 Action
let g:WhichKeyDesc_FindOrFormat_FindAction = "<leader>fa FindAction"
nmap <leader>fa <Action>(GotoAction)
" 快速 导航/查找 项目中的其他文件(Ctrl + n)
let g:WhichKeyDesc_FindOrFormat_FindFile = "<leader>ff FindFile"
nmap <leader>ff <Action>(GotoFile)
" 将当前编辑的文件在项目视图中进行选中定位(Alt + F1)
let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>fl FindFileLocation"
nmap <leader>fl <Action>(SelectInProjectView)
" 在整个项目中查找指定的文本、关键字或正则表达式，包括代码文件、配置文件和其他文件等 (Ctrl + Shift + F)
let g:WhichKeyDesc_FindOrFormat_FindText = "<leader>fw FindText"
nmap <leader>fw <Action>(FindInPath)
" 在整个项目中查找并替换指定的文本、关键字或正则表达式，包括代码文件、配置文件和其他文件等
let g:WhichKeyDesc_FindOrFormat_FindAndReplaceText = "<leader>fr FindAndReplaceText"
nmap <leader>fr <Action>(ReplaceInPath)
" 重新格式化代码，使其符合预定义的代码样式和规范 \| 优化导入语句，删除未使用的导入，并将导入语句按字母顺序进行排列
let g:WhichKeyDesc_FindOrFormat_Format = "<leader>fm Format"
nmap <leader>fm <Action>(ReformatCode) \| <Action>(OptimizeImports)
vmap <leader>fm <Action>(ReformatCode) \| <Action>(OptimizeImports)
" 定位当前文件位置
let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>fl FindFileLocation"
nmap <leader>fl <Action>(SelectInProjectView)
" 最近打开的项目
let g:WhichKeyDesc_FindOrFormat_OpenRecentlyProject = "<leader>fs OpenRecentlyProject"
nmap <leader>fs <Action>($LRU)

"========== g ==========
let g:WhichKeyDesc_GitOrGenerate = "<leader>g Git"
" 版本控制: rollback 回滚操作，将修改的代码还原到之前的版本
let g:WhichKeyDesc_GitOrGenerate_RollbackHunk = "<leader>gr RollbackHunk"
nmap <leader>gr <Action>(Vcs.RollbackChangedLines)
vmap <leader>gr <Action>(Vcs.RollbackChangedLines) \| <Esc>
" 版本控制: diff 显示文件的版本控制历史
let g:WhichKeyDesc_DebugOrDelete_ShowTabbedFileHistory = "<leader>gh ShowTabbedFileHistory"
nmap <leader>gh <Action>(Vcs.ShowTabbedFileHistory)
" git merge
let g:WhichKeyDesc_DebugOrDelete_GitMerge = "<leader>gm GitMerge"
nmap <leader>gm <Action>(Git.Merge)
" git compare same version file
let g:WhichKeyDesc_CompareSameVersionDiff = "<leader>gd CompareSameVersionDiff"
nmap <leader>gd <Action>(Compare.SameVersion)
" update project
let g:WhichKeyDesc_UpdateProject = "<leader>gu UpdateProject"
nmap <leader>gu <Action>(Vcs.UpdateProject)


"========== h ==========
" 隐藏所有编辑器之外的窗口
let g:WhichKeyDesc_HideAllWindows = "<leader>h HideAllWindows"
nmap <leader>h <Action>(HideAllWindows)

"========== i ==========
" 快速查找并跳转到下一个以 `(` 开始的函数或方法调用的位置️
let g:WhichKeyDesc_InsertAfterBrackets = "<leader>i InsertAfterBrackets"
nmap <leader>i f(a

"========== j ==========
" 普通模式下在行尾一个分号，然后进入插入模式并在当前行的下方新建一行
let g:WhichKeyDesc_InsertSemicolon = "<leader>j InsertSemicolon"
nmap <leader>j A;<Esc>o

"========== k ==========
"========== l ==========
"========== m ==========
" 打开/关闭 代码小地图
let g:WhichKeyDesc_CodeGlance = "<leader>m CodeGlance"
nmap <leader>m <Action>(CodeGlancePro.toggle)

"========== n ==========
let g:WhichKeyDesc_NERDTreeOrNew = "<leader>n NERDTreeOrNew"
" 取消搜索高亮显示
let g:WhichKeyDesc_NERDTreeOrNew_Highlight = "<leader>nl NoHighlight"
nmap <leader>nl :nohlsearch<CR>
" 在当前目录新建文件夹
let g:WhichKeyDesc_NERDTreeOrNew_NewDir = "<leader>nd NewDir"
nmap <leader>nd <Action>(NewDir)
" 在当前目录新建类
let g:WhichKeyDesc_NERDTreeOrNew_NewClass = "<leader>nc NewClass"
nmap <leader>nc <Action>(NewClass)
" 在当前目录新建文件
let g:WhichKeyDesc_NERDTreeOrNew_NewFile = "<leader>nf NewFile"
nmap <leader>nf <Action>(NewFile)
" 将使焦点转移到 NERDTree 窗口
let g:WhichKeyDesc_NERDTreeOrNew_NERDTreeFocus = "<leader>nn NERDTreeFocus"
nmap <leader>nn :NERDTreeFocus<CR>
let g:WhichKeyDesc_NERDTreeOrNew_NERDTreeFind = "<leader>o NERDTreeFind"
" 在 NERDTree 文件资源管理器中定位当前编辑文件所在的节点，并使其可见
nmap <leader>o :NERDTreeFind<CR>

"========== o ==========
"========== p ==========
" 从剪切板粘贴
let g:WhichKeyDesc_PasteClipboard = "<leader>p PasteClipboard"
nmap <leader>p "+p
" 从剪切板粘贴到上面行
"let g:WhichKeyDesc_PasteClipboardUp = "<leader>P PasteClipboardUp"
"nmap <leader>P "+P
" 在可视模式中：从剪切板粘贴
"let g:WhichKeyDesc_PasteClipboardToVisual = "<leader>p PasteClipboardToVisual"
vmap <leader>p "+p
" 在可视模式中：从剪切板粘贴到上面行
"let g:WhichKeyDesc_PasteClipboardUp = "<leader>P PasteClipboardUp"
"vmap <leader>P "+P

"========== q ==========
" 退出 IDEA
let g:WhichKeyDesc_Quit = "<leader>q quit"
"nmap <leader>q <Action>(CloseProject)
nmap <leader>q <Action>(Exit)

"========== r ==========
let g:WhichKeyDesc_RunOrRe = "<leader>r RunOrRe"
" 运行当前编辑器中的文件或类 (Shift + F10)
let g:WhichKeyDesc_RunOrRe_RunClass = "<leader>rc RunClass"
nmap <leader>rc <Action>(RunClass)
" 重新运行最近一次运行的程序或测试 (Ctrl+Shift + F10)
let g:WhichKeyDesc_RunOrRe_ReRun = "<leader>rr ReRun"
nmap <leader>rr <Action>(Rerun)
" 重新运行最近一次运行的测试（Unit Tests） (Ctrl + Shift + F10)
let g:WhichKeyDesc_RunOrRe_ReRunTests = "<leader>rt ReRunTests"
nmap <leader>rt <Action>(RerunTests)
" 在代码中快速更改一个标识符的名称，并自动处理所有相关的引用 (Shift + F6)
let g:WhichKeyDesc_RunOrRe_Rename = "<leader>rn Rename"
map <leader>rn <Action>(RenameElement)

"========== s ==========
let g:WhichKeyDesc_SurroundWithOrSplit = "<leader>s SurroundWithOrSplit"
" Surround With, 使用...来包裹代码
let g:WhichKeyDesc_SurroundWithOrSplit_SurroundWith = "<leader>sw SurroundWith"
nmap <leader>sw <Action>(SurroundWith)
vmap <leader>sw <Action>(SurroundWith)
" 将标签页移到右边
let g:WhichKeyDesc_SurroundWithOrSplit_SplitAndMoveTabRight = "<leader>sr SplitAndMoveTabRight"
nmap <leader>sr <Action>(MoveTabRight)
" 将标签页移到下边
let g:WhichKeyDesc_SurroundWithOrSplit_SplitAndMoveTabDown = "<leader>sd SplitAndMoveTabDown"
nmap <leader>sd <Action>(MoveTabDown)
" 改变标签页的分割方向
let g:WhichKeyDesc_SurroundWithOrSplit_ChangeSplitOrientation = "<leader>sc ChangeSplitOrientation"
nmap <leader>sc <Action>(ChangeSplitOrientation)
" 取消标签页的分割
let g:WhichKeyDesc_SurroundWithOrSplitsplit = "<leader>su Unsplit"
nmap <leader>su <Action>(Unsplit)

"========= t ==========
" 翻译
let g:WhichKeyDesc_Translate = "<leader>t Translate"
nmap <leader>t <Action>($EditorTranslateAction)
vmap <leader>t <Action>($EditorTranslateAction)
let g:WhichKeyDesc_Translate_Dialog = "<leader>T TranslateDialog"
nmap <leader>T <Action>($ShowTranslationDialogAction)

"========== u ==========
"========== v ==========
"========== w ==========
nmap <leader>w <Action>(SaveAll)

"========== x ==========
"========== y ==========
" 将内容复制到剪贴板
let g:WhichKeyDesc_CopyClipboard_CopySelect = "<leader>y CopySelect"
vmap <leader>y "+y
" 将一整行复制到剪贴板
let g:WhichKeyDesc_CopyClipboard_CopyLine = "<leader>yy CopyLine"
nmap <leader>yy "+yy
" 复制整个文件内容
"let g:WhichKeyDesc_CopyAllFileContent = "<leader>y CopyAllFileContent"
"map <leader>y mmggVGy`m

"========== z ==========
let g:WhichKeyDesc_Zip = "<leader>z Zip"
" 展开所有代码折叠区域 (Ctrl + Shift + 加号键)
let g:WhichKeyDesc_Zip_unZipAll = "<leader>zo unZipAll"
nmap <leader>zo <Action>(ExpandAllRegions)
" 折叠所有代码折叠区域 (Ctrl + Shift + 减号键)
let g:WhichKeyDesc_Zip_ZipAll = "<leader>zc ZipAll"
nmap <leader>zc <Action>(CollapseAllRegions)


" ================================= Plugin 设置 start ======================================
" easymotion 设置
let g:EasyMotion_do_mapping = 0
nmap <leader><leader> <Plug>(easymotion-s)

" NERDTree 设置
" leader 的按键设置在字母 n 的映射上
" 切换 NERDTree 文件资源管理器的显示状态，即打开或关闭 NERDTree
nmap <C-t> :NERDTreeToggle<CR>

" multiple-cursors 按键映射设置
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap <C-x> <Plug>SkipOccurrence
xmap <C-x> <Plug>SkipOccurrence
nmap <C-p> <Plug>RemoveOccurrence
xmap <C-p> <Plug>RemoveOccurrence
nmap <S-C-n> <Plug>AllWholeOccurrence
xmap <S-C-n> <Plug>AllWholeOccurrence

" replaceWithRegister 按键映射设置
nmap rs <Plug>ReplaceWithRegisterOperator
nmap rss <Plug>ReplaceWithRegisterLine
xmap rs <Plug>ReplaceWithRegisterVisual
" ================================= Plugin 设置 end ======================================

" sethandler 处理 vim 快捷键映射冲突
sethandler <C-q> a:ide
"sethandler <C-h> a:vim
"sethandler <C-j> a:vim i:ide
"sethandler <C-k> a:vim i:ide
"sethandler <C-l> a:vim
sethandler <C-S-V> a:vim